//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "post_tags"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub post_id: i64,
    pub tag_id: i64,
    pub id_del: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    PostId,
    TagId,
    IdDel,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter,DeriveRelation)]
pub enum Relation {
    #[sea_orm(belongs_to="super::post::Entity",from="Column::PostId",to="super::post::Column::Id")]
    Post,
    #[sea_orm(belongs_to="super::tags::Entity",from="Column::TagId",to="super::tags::Column::Id")]
    Tags,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::PostId => ColumnType::BigInteger.def(),
            Self::TagId => ColumnType::BigInteger.def(),
            Self::IdDel => ColumnType::Boolean.def(),
        }
    }
}

// impl RelationTrait for Relation {
//     fn def(&self) -> RelationDef {
//         panic!("No RelationDef")
//     }
// }

impl ActiveModelBehavior for ActiveModel {}
